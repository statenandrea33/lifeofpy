{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to lifeofpy","text":"<p>A python package for interactive mapping. </p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://statenandrea33.github.io/lifeofpy</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-february-22-2023","title":"v0.0.1 - February 22, 2023","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/statenandrea33/lifeofpy/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>lifeofpy could always use more documentation, whether as part of the official lifeofpy docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/statenandrea33/lifeofpy/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up lifeofpy for local development.</p> <ol> <li> <p>Fork the lifeofpy repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/lifeofpy.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv lifeofpy\n$ cd lifeofpy/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 lifeofpy tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/statenandrea33/lifeofpy/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install lifeofpy, run this command in your terminal:</p> <pre><code>pip install lifeofpy\n</code></pre> <p>This is the preferred method to install lifeofpy, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for lifeofpy can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/statenandrea33/lifeofpy\n</code></pre>"},{"location":"lifeofpy/","title":"lifeofpy module","text":"<p>Main module.</p>"},{"location":"lifeofpy/#lifeofpy.lifeofpy.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>lifeofpy/lifeofpy.py</code> <pre><code>class Map(ipyleaflet.Map):\n\n    def __init__(self, center, zoom, **kwargs) -&gt; None:\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n    def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Add a search control to the map.\n\n        Args:\n            **kwargs: Keyword arguments to pass to the search control.\n        \"\"\"\n        if \"url\" not in kwargs:\n            kwargs[\"url\"] = \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"\n\n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(search_control)\n\n    def add_draw_control(self, **kwargs):\n\"\"\"Add a draw control to the map.\n\n        Args:\n            **kwargs: Keyword arguments to pass to the draw control.\n        \"\"\"\n        draw_control = ipyleaflet.DrawControl(**kwargs)\n        self.add_control(draw_control)\n</code></pre>"},{"location":"lifeofpy/#lifeofpy.lifeofpy.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Add a draw control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Keyword arguments to pass to the draw control.</p> <code>{}</code> Source code in <code>lifeofpy/lifeofpy.py</code> <pre><code>def add_draw_control(self, **kwargs):\n\"\"\"Add a draw control to the map.\n\n    Args:\n        **kwargs: Keyword arguments to pass to the draw control.\n    \"\"\"\n    draw_control = ipyleaflet.DrawControl(**kwargs)\n    self.add_control(draw_control)\n</code></pre>"},{"location":"lifeofpy/#lifeofpy.lifeofpy.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Add a search control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Keyword arguments to pass to the search control.</p> <code>{}</code> Source code in <code>lifeofpy/lifeofpy.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Add a search control to the map.\n\n    Args:\n        **kwargs: Keyword arguments to pass to the search control.\n    \"\"\"\n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"\n\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"lifeofpy/#lifeofpy.lifeofpy.generate_lucky_number","title":"<code>generate_lucky_number(length=1)</code>","text":"<p>Generate a random number of a given length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>The length of the number. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>The generated number.</p> Source code in <code>lifeofpy/lifeofpy.py</code> <pre><code>def generate_lucky_number(length=1):\n\"\"\"Generate a random number of a given length.\n\n    Args:\n        length (int, optional): The length of the number. Defaults to 1.\n\n    Returns:\n        int: The generated number.\n    \"\"\"\n\n    result_str = ''.join(random.choice(string.digits) for i in range(length))\n    return int(result_str)\n</code></pre>"},{"location":"lifeofpy/#lifeofpy.lifeofpy.generate_random_string","title":"<code>generate_random_string(length=10, upper=False, digits=False, punctuation=False)</code>","text":"<p>Generate a random string of a given length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>The length of the string. Defaults to 10.</p> <code>10</code> <code>upper</code> <code>bool</code> <p>Whether to include uppercase letters. Defaults to False.</p> <code>False</code> <code>digits</code> <code>bool</code> <p>Whether to include digits. Defaults to False.</p> <code>False</code> <code>punctuation</code> <code>bool</code> <p>Whether to include punctuation. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The generated string.</p> Source code in <code>lifeofpy/lifeofpy.py</code> <pre><code>def generate_random_string(length=10, upper=False, digits=False, punctuation=False):\n\"\"\"Generate a random string of a given length.\n\n    Args:\n        length (int, optional): The length of the string. Defaults to 10.\n        upper (bool, optional): Whether to include uppercase letters. Defaults to False.\n        digits (bool, optional): Whether to include digits. Defaults to False.\n        punctuation (bool, optional): Whether to include punctuation. Defaults to False.\n\n    Returns:\n        str: The generated string.\n    \"\"\"    \n\n    letters = string.ascii_lowercase\n    if upper:\n        letters += string.ascii_uppercase\n    if digits:\n        letters += string.digits\n    if punctuation:\n        letters += string.punctuation\n    result_str = ''.join(random.choice(letters) for i in range(length))\n    return result_str\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use lifeofpy in a project:</p> <pre><code>import lifeofpy\n</code></pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[2]: Copied! <pre>import folium\n</pre> import folium In\u00a0[4]: Copied! <pre>m = folium.Map(location=[45.5236, -122.6750])\n</pre> m = folium.Map(location=[45.5236, -122.6750]) In\u00a0[5]: Copied! <pre>m\n</pre> m Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import lifeofpy\n</pre> import lifeofpy In\u00a0[4]: Copied! <pre>lifeofpy.generate_lucky_number(2)\n</pre> lifeofpy.generate_lucky_number(2) Out[4]: <pre>45</pre> In\u00a0[6]: Copied! <pre>lifeofpy.generate_random_string(10, upper=True, digits=True, punctuation=True)\n</pre> lifeofpy.generate_random_string(10, upper=True, digits=True, punctuation=True) Out[6]: <pre>'K2GTw{+7tF'</pre> In\u00a0[7]: Copied! <pre>lifeofpy.generate_random_string(6)\n</pre> lifeofpy.generate_random_string(6) Out[7]: <pre>'kqmnfc'</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[4]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(\n    basemap=basemap_to_tiles(basemaps.OpenTopoMap),\n    center=(52.204793, 360.121558),\n    zoom=4\n)\n\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(     basemap=basemap_to_tiles(basemaps.OpenTopoMap),     center=(52.204793, 360.121558),     zoom=4 )  m Out[4]: <pre>Map(center=[52.204793, 360.121558], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title'\u2026</pre> In\u00a0[5]: Copied! <pre>import leafmap\n</pre> import leafmap In\u00a0[8]: Copied! <pre>m = leafmap.Map()\nm.add_basemap(\"HYBRID\")\nm\n</pre> m = leafmap.Map() m.add_basemap(\"HYBRID\") m Out[8]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"},{"location":"examples/key_features/","title":"Key features","text":"In\u00a0[\u00a0]: Copied! <pre># Key Features\n</pre> # Key Features"},{"location":"examples/lifeofpy/","title":"Lifeofpy","text":"In\u00a0[1]: Copied! <pre>import lifeofpy\n</pre> import lifeofpy In\u00a0[2]: Copied! <pre>m = lifeofpy.Map(center=[40, -100], zoom=10)\nm.add_draw_control()\nm.add_search_control()\nm\n</pre> m = lifeofpy.Map(center=[40, -100], zoom=10) m.add_draw_control() m.add_search_control() m Out[2]: <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre>"}]}